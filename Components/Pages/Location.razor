@page "/location"
@inject IHttpClientFactory _clientFactory
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.Extensions.Options
@using System.Runtime.CompilerServices
@using System.Threading.Tasks
@using WeatherStation
@rendermode InteractiveServer

<PageTitle>Location</PageTitle>
<div class="time">@forecastSkovde?.ToString()</div>
<section id="location" class="location">
    <div id="date" class="date numbers">@DateOnly.FromDateTime(DateTime.Now)</div>
    <h2 class="Skövde">Skövde</h2>
    @* <InputSelect @bind-Value="forecastSkovde" @onchange="HandleLocationSwitch">
        @foreach (string option in options)
        {
            <option value="@option">@option</option>
        }
    </InputSelect> *@
    <div id="time" class="time numbers">@TimeOnly.FromDateTime(DateTime.Now)</div>
</section>

@code {
    public WeatherClass? forecastSkovde;
/*    private string[] options = { "", "Skövde", "Göteborg", "Stockholm" };*/
    string? errorMessage;
/*    private async Task HandleLocationSwitch(ChangeEventArgs e)
    {
        if (options.ToString() == options[1])
        {
            Console.WriteLine(options[2]);
        }
        else if (options.ToString() == options[2])
        {
            Console.WriteLine(options[2]);
        }
        else
        {
            Console.WriteLine(options[3]);
        }
    }*/

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
        "https://opendata-download-metfcst.smhi.se/api/category/snow1g/version/1/geotype/point/lon/13.8406/lat/58.3953/data.json");

        var client = _clientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            forecastSkovde = await response.Content.ReadFromJsonAsync<WeatherClass>();
            errorMessage = null;
        }
        else
        {
            errorMessage = $"Error fetching data: {response.ReasonPhrase}";
        }
    }
}